==7999== Memcheck, a memory error detector
==7999== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==7999== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==7999== Command: ./a.out
==7999== 
==7999== Use of uninitialised value of size 8
==7999==    at 0x4E8476B: _itoa_word (_itoa.c:179)
==7999==    by 0x4E8812C: vfprintf (vfprintf.c:1631)
==7999==    by 0x4E8F898: printf (printf.c:33)
==7999==    by 0x4005EB: main (in /home/kourtinesble/a.out)
==7999== 
==7999== Conditional jump or move depends on uninitialised value(s)
==7999==    at 0x4E84775: _itoa_word (_itoa.c:179)
==7999==    by 0x4E8812C: vfprintf (vfprintf.c:1631)
==7999==    by 0x4E8F898: printf (printf.c:33)
==7999==    by 0x4005EB: main (in /home/kourtinesble/a.out)
==7999== 
==7999== Conditional jump or move depends on uninitialised value(s)
==7999==    at 0x4E881AF: vfprintf (vfprintf.c:1631)
==7999==    by 0x4E8F898: printf (printf.c:33)
==7999==    by 0x4005EB: main (in /home/kourtinesble/a.out)
==7999== 
==7999== Conditional jump or move depends on uninitialised value(s)
==7999==    at 0x4E87C59: vfprintf (vfprintf.c:1631)
==7999==    by 0x4E8F898: printf (printf.c:33)
==7999==    by 0x4005EB: main (in /home/kourtinesble/a.out)
==7999== 
==7999== Conditional jump or move depends on uninitialised value(s)
==7999==    at 0x4E87CE2: vfprintf (vfprintf.c:1631)
==7999==    by 0x4E8F898: printf (printf.c:33)
==7999==    by 0x4005EB: main (in /home/kourtinesble/a.out)
==7999== 

 The sum of 1 billion integers is: 500000000504195824 
==7999== 
==7999== HEAP SUMMARY:
==7999==     in use at exit: 4,000 bytes in 1 blocks
==7999==   total heap usage: 2 allocs, 1 frees, 8,096 bytes allocated
==7999== 
==7999== LEAK SUMMARY:
==7999==    definitely lost: 4,000 bytes in 1 blocks
==7999==    indirectly lost: 0 bytes in 0 blocks
==7999==      possibly lost: 0 bytes in 0 blocks
==7999==    still reachable: 0 bytes in 0 blocks
==7999==         suppressed: 0 bytes in 0 blocks
==7999== Rerun with --leak-check=full to see details of leaked memory
==7999== 
==7999== For counts of detected and suppressed errors, rerun with: -v
==7999== Use --track-origins=yes to see where uninitialised values come from
==7999== ERROR SUMMARY: 39 errors from 5 contexts (suppressed: 0 from 0)
